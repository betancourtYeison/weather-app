{"version":3,"sources":["services/transformWeather.js","constants/weathers.js","services/transformForecast.js","constants/api_url.js","services/getUrlForecastByCity.js","services/getUrlWeatherByCity.js","actions/index.js","reducers/cities.js","reducers/index.js","reducers/city.js","store/index.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","containers/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","containers/ForecastExtendedContainer.js","App.js","serviceWorker.js","index.js"],"names":["transformWeather","weather_data","kelvin","_weather_data$main","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","concat","transformForecast","data","list","filter","item","moment","unix","dt","utc","hour","map","weekDay","format","api_key","getUrlForecastByCity","city","getUrlWeatherByCity","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","setSelectedCity","value","dispatch","getState","type","setCity","state","date","cities","forecastDataDate","now","Date","api_forecast","fetch","then","resolve","json","forecastData","setForecastData","setWeather","payload","forEach","api_weather","getForecastDataFromCities","createSelector","getWeatherCities","toPairs","_ref","_ref2","Object","slicedToArray","key","name","combineReducers","arguments","length","undefined","action","_action$value","objectSpread","defineProperty","_action$payload","getCity","_getForecastDataFromCities","_getWeatherCities","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","Location","react_default","a","createElement","className","icons","_icons","WeatherTemperature","icon","react_weathericons_lib_default","size","getWeatherIcon","WeatherExtraInfo","WeatherData","_ref$data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","prototype","PropTypes","shape","number","isRequired","string","WeatherLocation","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress_default","LocationList","onSelectedLocation","components_WeatherLocation","handleonWeatherLocationClick","strToComponents","LocationListContainer","handleOnSelectedLocation","_this","props","_this$props","this","components_LocationList","citiesWeather","Component","connect","bindActionCreators","actions","ForecastItem","ForecastExtended","components_ForecastItem","renderForecastItemDays","ForecastExtendedContainer","components_ForecastExtended","theme","createMuiTheme","typography","useNextVariants","App","styles","react_flexbox_grid_lib","AppBar_default","position","Toolbar_default","Typography_default","variant","color","xs","md","containers_LocationListContainer","Paper_default","elevation","containers_ForecastExtendedContainer","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48aba5ba.chunk.js","sourcesContent":["import convert from 'convert-units';\nimport {\n    CLOUD,\n    SUN,\n    RAIN,\n    SNOW,\n    THUNDER,\n    DRIZZLE,\n} from '../constants/weathers';\n\nconst getTemp = kelvin => {\n    return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\n}\n\nconst getWeatherState = weather => {\n    const { id } = weather\n    if(id < 300){\n        return THUNDER;\n    }else if(id < 400){\n        return DRIZZLE;\n    }else if(id < 600){\n        return RAIN;\n    }else if(id < 700){\n        return SNOW;\n    }else if(id === 800){\n        return SUN;\n    }else{\n        return CLOUD;\n    }\n}\n\nconst transformWeather = weather_data => {\n    const { humidity, temp } = weather_data.main;\n    const { speed } = weather_data.wind;\n    const weatherState = getWeatherState(weather_data.weather[0]);\n    const temperature = getTemp(temp);\n    \n    const data = {\n        humidity,\n        temperature,\n        weatherState,\n        wind: `${speed} m/s`,\n    }\n\n    return data;\n}\n\nexport default transformWeather;","export const CLOUD = \"cloud\";\n\nexport const CLOUDY = \"cloudy\";\n\nexport const SUN = \"sun\";\n\nexport const RAIN = \"rain\";\n\nexport const SNOW = \"snow\";\n\nexport const WINDY = \"windy\";\n\nexport const THUNDER = \"thunder\";\n\nexport const DRIZZLE = \"drizzle\";","import moment from 'moment';\nimport 'moment/locale/es';\nimport transformWeather from './transformWeather';\n\nconst transformForecast = data => (\n    data.list.filter(item =>{\n        return moment.unix(item.dt).utc().hour() === 6 || \n                moment.unix(item.dt).utc().hour() === 12 || \n                moment.unix(item.dt).utc().hour() === 18;\n    }).map(item => (\n        {\n            weekDay: moment.unix(item.dt).utc().format('ddd'),\n            hour: moment.unix(item.dt).utc().hour(),\n            data : transformWeather(item)\n        }\n    ))\n);\n\nexport default transformForecast;","export const api_key = \"f63c0a4aabaa6203ed5127361e29ad58\";\nexport const url_base_weather = \"https://api.openweathermap.org/data/2.5/weather\";\nexport const url_base_forecast = \"https://api.openweathermap.org/data/2.5/forecast\";\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`","import { api_key, url_base_forecast } from './../constants/api_url'\n\nconst getUrlForecastByCity = city => {\n    return `${url_base_forecast}?q=${city}&appid=${api_key}`      \n}\n\nexport default getUrlForecastByCity;","import { api_key, url_base_weather } from './../constants/api_url'\n\nconst getUrlWeatherByCity = city => {\n    return `${url_base_weather}?q=${city}&appid=${api_key}`      \n}\n\nexport default getUrlWeatherByCity;","import transformForecast from './../services/transformForecast';\nimport getUrlForecastByCity from './../services/getUrlForecastByCity';\nimport transformWeather from './../services/transformWeather';\nimport getUrlWeatherByCity from './../services/getUrlWeatherByCity';\n\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\n\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER';\n\nconst setCity = value => ({ type: SET_CITY, value });\nconst setForecastData = value => ({ type: SET_FORECAST_DATA, value });\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload });\n\nexport const setSelectedCity = value => {\n    return (dispatch, getState) => {\n        dispatch(setCity(value));\n        const state = getState();\n        const date = state.cities[value] && state.cities[value].forecastDataDate\n        const now = new Date();\n        if(date && ((now - date) < (1 * 60 * 1000))){\n            return;\n        }\n        const api_forecast = getUrlForecastByCity(value);\n        return fetch(api_forecast).then( \n            resolve => (resolve.json())\n        ).then(data =>{\n            const forecastData = transformForecast(data);\n            dispatch(setForecastData({city:value, forecastData}));\n        });\n    }\n};\n\nexport const setWeather = payload => {\n    return dispatch => {\n        payload.forEach(city => {\n            dispatch(getWeatherCity(city));\n            const api_weather = getUrlWeatherByCity(city)\n            fetch(api_weather).then( resolve => {\n                return resolve.json();\n            }).then(weather_data =>{\n                const weather = transformWeather(weather_data);\n                dispatch(setWeatherCity({ city, weather }));\n            });\n        })\n        \n    }\n    \n    \n}","import { createSelector } from 'reselect';\nimport toPairs from 'lodash.topairs'\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from './../actions';\n\nexport const cities = (state = {}, action) => {\n    switch (action.type) {\n        case SET_FORECAST_DATA: {\n            const { city, forecastData} = action.value\n            return { ...state, [city]: { ...state[city], forecastData, forecastDataDate: new Date() }}\n        }\n        case GET_WEATHER_CITY: {\n            const city = action.payload\n            return { ...state, [city]: { ...state[city], weather: null}}\n        }\n        case SET_WEATHER_CITY: {\n            const { city, weather } = action.payload\n            return { ...state, [city]: { ...state[city], weather }}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const getForecastDataFromCities = \n        createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\n\nconst fromObjectToArray = cities => (toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather })))\n\nexport const getWeatherCities = \n        createSelector(state => fromObjectToArray(state), cities => cities);","import { combineReducers } from 'redux';\nimport { createSelector } from 'reselect';\nimport { city } from './city';\nimport { \n    cities,\n    getForecastDataFromCities as _getForecastDataFromCities,\n    getWeatherCities as _getWeatherCities \n} from './cities';\n\nexport default combineReducers({\n    cities,\n    city\n})\n\nexport const getCity = createSelector(state => state.city, city => city);\n\nexport const getForecastDataFromCities = createSelector(state => state.cities, getCity, _getForecastDataFromCities);\n\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities);","import { SET_CITY } from './../actions';\nexport const city = (state = {}, action) => {\n    switch (action.type) {\n        case SET_CITY:\n            return action.value;\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './../reducers';\n\nconst initialState = {\n    city: 'Buenos Aires,ar'\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n/*\nconst Location = (props) => {\n    // Destructuring\n    // const city = props.city;\n    const { city } = props;\n\n    return (\n        <div><h1>{city}</h1></div>\n    );\n};\n*/\n\nconst Location = ({ city }) => (\n    <div className=\"locationCont\">\n        <h1>{city}</h1>\n    </div>\n);\n\nLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n};\n\nexport default Location;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport {\n    CLOUD,\n    SUN,\n    RAIN,\n    SNOW,\n    THUNDER,\n    DRIZZLE,\n} from '../../../constants/weathers';\nimport './styles.css';\n\nconst icons = {\n    [CLOUD]: \"cloud\",\n    [SUN]: \"day-sunny\",\n    [RAIN]: \"rain\",\n    [SNOW]: \"snow\",\n    [THUNDER]: \"day-thunderstorm\",\n    [DRIZZLE]: \"day-showers\",\n};\n\nconst getWeatherIcon = weatherState => {\n    const icon  = icons[weatherState];\n\n    const sizeIcon = \"4x\";\n\n    if(icon){\n        return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />\n    }else{\n        return <WeatherIcons className=\"wicon\" name=\"day-sunny\" size={sizeIcon} />\n    }\n};\n\nconst WeatherTemperature = ({temperature, weatherState}) => (\n    <div className=\"weatherTemperatureCont\">\n        {getWeatherIcon(weatherState)}\n        <span className=\"temperatue\">{`${temperature}`}</span>\n        <span className=\"temperatueType\">{` C`}</span>\n    </div>\n);\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n};\n\nexport default WeatherTemperature;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nconst WeatherExtraInfo = ({ humidity, wind}) => (\n    <div className=\"weatherExtraInfoCont\">\n        <span className=\"extraInfoText\">{`Humedad: ${humidity} %`}</span>\n        <span className=\"extraInfoText\">{`Viento: ${wind}`}</span>\n    </div>\n);\n\nWeatherExtraInfo.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n};\n\nexport default WeatherExtraInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherTemperature from './WeatherTemperature';\nimport WeatherExtraInfo from './WeatherExtraInfo';\nimport './styles.css';\n\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind} }) => (\n    <div className=\"weatherDataCont\">\n        <WeatherTemperature temperature={temperature} weatherState={weatherState}></WeatherTemperature>\n        <WeatherExtraInfo humidity={humidity} wind={wind}></WeatherExtraInfo>\n    </div>\n);\n\nWeatherData.prototype = {\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n};\n\nexport default WeatherData;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Location from './Location';\nimport WeatherData from './WeatherData';\nimport './styles.css';\n\nconst WeatherLocation = ({ onWeatherLocationClick, city, data } ) => (\n    <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\n        <Location city={city}></Location>\n        {data ? <WeatherData data={data}></WeatherData> : <CircularProgress size={50} />}\n    </div>  \n);\n\nWeatherLocation.propTypes = {\n    onWeatherLocationClick: PropTypes.func,\n    city: PropTypes.string.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default WeatherLocation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherLocation from './WeatherLocation';\nimport './style.css';\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n    const handleonWeatherLocationClick = city => {\n        onSelectedLocation(city)\n    }\n    \n    const strToComponents = cities => (\n        cities.map( city => \n            <WeatherLocation \n                key={city.key} \n                onWeatherLocationClick={() => handleonWeatherLocationClick(city.name)}\n                city={city.name} \n                data={city.data}\n                />)\n    );\n\n    return (\n        <div className='LocationList'>\n            { strToComponents(cities) }\n        </div>\n    )\n};\n\nLocationList.propTypes = {\n    cities : PropTypes.array.isRequired,\n    onSelectedLocation: PropTypes.func,\n};\n\nexport default LocationList;","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from './../actions';\nimport { getWeatherCities, getCity } from './../reducers'\nimport LocationList from './../components/LocationList';\n\nclass LocationListContainer extends Component {\n\n    componentDidMount() {\n        const { setWeather, cities, setSelectedCity, city } = this.props\n        setWeather(cities)\n        setSelectedCity(city);\n    }\n    \n    handleOnSelectedLocation = city =>{\n        const { setSelectedCity } = this.props\n        setSelectedCity(city);\n    }\n\n    render() {\n        return (\n            <LocationList \n                cities={this.props.citiesWeather}\n                onSelectedLocation={this.handleOnSelectedLocation}\n                />\n        );\n    }\n}\n\nLocationListContainer.propTypes = {\n    setSelectedCity: PropTypes.func.isRequired,\n    cities: PropTypes.array.isRequired,\n    citiesWeather: PropTypes.array,\n    city: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    citiesWeather: getWeatherCities(state),\n    city: getCity(state)\n});\n\n// const mapDispatchToProps = dispatch => ({\n//     setSelectedCity: value => dispatch(setSelectedCity(value)),\n//     setWeather: cities => dispatch(setWeather(cities))\n// });\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherData from './../WeatherLocation/WeatherData';\n\nconst ForecastItem = ({ weekDay, hour, data }) => (\n    <div>\n        <h2>{weekDay} - {hour} hs</h2>\n        <WeatherData data={data} />\n    </div>\n)\n\nForecastItem.propTypes = {\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default ForecastItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ForecastItem from './ForecastItem';\nimport './style.css';\n\nconst renderForecastItemDays = (forecastData) => {\n    return forecastData.map(item => {\n        return <ForecastItem key={`${item.weekDay}-${item.hour}`} weekDay={item.weekDay} hour={item.hour} data={item.data}/>\n    });\n}\n\nconst renderProgress = ()  => {\n    return <CircularProgress size={50} />\n}\n\nconst ForecastExtended = ({city, forecastData}) => (\n    <div>\n        <h2 className='forecast-title'>\n            Pronóstico Extendido para {city}\n        </h2>\n        { forecastData ? renderForecastItemDays(forecastData) : renderProgress() }\n    </div>\n);\n\nForecastExtended.propTypes = {\n    city: PropTypes.string.isRequired,\n    forecastData: PropTypes.array,\n}\n\nexport default ForecastExtended;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCity, getForecastDataFromCities } from './../reducers';\nimport ForecastExtended from './../components/ForecastExtended';\n\nclass ForecastExtendedContainer extends Component {\n    render() {\n        const { city, forecastData } = this.props;\n        return (\n            <ForecastExtended city={city} forecastData={forecastData}/>\n        );\n    }\n}\n\nForecastExtendedContainer.propTypes = {\n    city: PropTypes.string.isRequired,\n    forecastData: PropTypes.array,\n};\n\nconst mapStatetoProps = state => ({ city: getCity(state), forecastData: getForecastDataFromCities(state) });\n\nexport default connect(mapStatetoProps, null)(ForecastExtendedContainer);","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport LocationListContainer from './containers/LocationListContainer';\nimport ForecastExtendedContainer from './containers/ForecastExtendedContainer';\nimport './App.css';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n\nconst cities = [\n    \"Buenos Aires,ar\",\n    \"Bogota,col\",\n    \"Washington,us\",\n    \"Ciudad de México,mx\",\n    \"Madrid,es\",\n    \"Lima,pe\"\n];\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Grid>\n                    <Row>\n                        <AppBar position='sticky'>\n                            <Toolbar>\n                                <Typography variant='h6' color='inherit'>\n                                    Aplicación del clima\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                    </Row>\n                    <Row>\n                        <Col xs={12} md={6}>\n                            <LocationListContainer cities={cities} />\n                        </Col>\n                        <Col xs={12} md={6}>\n                            <Paper elevation={4}>\n                                <div className=\"details\">\n                                    <ForecastExtendedContainer />\n                                </div>\n                            </Paper>\n                        </Col>\n                    </Row>\n                </Grid>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}